version: '3'
services:
  orders-db:
    image: mysql:latest
    hostname: mysql
    restart: always
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: order_db
    ports:
      - "3309:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  books-db:
    image: mysql:latest
    hostname: mysql
    restart: always
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: books_db
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  users-db:
    image: mysql:latest
    hostname: mysql
    restart: always
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: users_db
    ports:
      - "3308:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  cart-db:
    image: mysql:latest
    hostname: mysql
    restart: always
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: cart_db
    ports:
      - "3310:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  discovery-service:
    build: ./discovery-service
    image: my-book-store-discovery-service:v1
    container_name: my-discovery-service
    ports:
      - '8761:8761'
    expose:
      - '8761'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 20s
      retries: 10

  book-service:
    build: ./book-service
    image: my-book-store-book-service:v1
    container_name: my-book-service
    ports:
      - "8082:8082"
    expose:
      - "8082"
    environment:
      DISCOVERY_SERVICE_URL: http://discovery-service:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/books_db?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
    depends_on:
      books-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 20s
      retries: 10

  user-service:
    build: ./user-service
    image: my-book-store-user-service:v1
    container_name: my-user-service
    ports:
      - "8083:8083"
    expose:
      - "8083"
    environment:
      DISCOVERY_SERVICE_URL: http://discovery-service:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/users_db?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
    depends_on:
      users-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 20s
      retries: 10

  cart-service:
    build: ./cart-service
    image: my-book-store-cart-service:v1
    container_name: my-cart-service
    ports:
      - "8086:8086"
    expose:
      - "8086"
    environment:
      DISCOVERY_SERVICE_URL: http://discovery-service:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/cart_db?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
    depends_on:
      cart-db:
        condition: service_healthy
      book-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 20s
      retries: 10

  order-service:
    build: ./order-service
    image: my-book-store-order-service:v1
    container_name: my-order-service
    ports:
      - "8085:8085"
    expose:
      - "8085"
    environment:
      DISCOVERY_SERVICE_URL: http://discovery-service:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_db?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
    depends_on:
      orders-db:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 20s
      retries: 10
  api-gateway-service:
    build: ./api-gateway-service
    image: my-book-store-api-gateway-service:v1
    container_name: my-api-gateway-service
    ports:
      - "8087:8087"
    expose:
      - "8087"
    environment:
      DISCOVERY_SERVICE_URL: http://discovery-service:8761/eureka
    depends_on:
      book-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - book-service
      - user-service
      - order-service
      - api-gateway-service
      - discovery-service
  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"


  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:latest
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql